#include<iostream>
#include<iomanip>
using namespace std;
int **matr(int n, int m, int q, int A[], int B[])
{
	int i, j, u = 0;
	int **Matryca1 = new int *[m];
	for (i = 0; i < m; i++)
		Matryca1[i] = new int[n];
	for (i = 0; i < m; i++)
	{
		for (j = 0; j < n; j++)
		{
			Matryca1[i][j] = A[u];
			u++;
		}
	}
	u = 0;
	int **Matryca2 = new int *[n];
	for (i = 0; i < n; i++)
		Matryca2[i] = new int[q];
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < q; j++)
		{
			Matryca2[i][j] = B[u];
			u++;
		}
	}
	int **Matryca3 = new int *[m];
	for (i = 0; i < m; i++)
		Matryca3[i] = new int[q];

	for (i = 0; i < m; i++)
	{
		for (j = 0; j < q; j++)
		{
			Matryca3[i][j] = 0;
			for (int k = 0; k < n; k++)
				Matryca3[i][j] += (Matryca1[i][k] * Matryca2[k][j]);
		}
	}
	return Matryca3;
}

void assert(int** matrix, int** result, int m, int n)
{
	int count = 0;
	for (int i = 0; i < m; i++)
		for (int j = 0; j < n; j++)
		{
			if (matrix[i][j] != result[i][j])
			{
				cout << "Something went wrong. Check i = " << i << " and j = " << j << endl;
				break;
			}
			else
				count++;
		}
	if (count == m*n)
		cout << "OK" << endl;
}

int main()
{

	//тест первый
	int matrix1[4];
	int matrix2[4];
	for (int i = 0; i < 4; i++)
		matrix1[i] = 2;
	for (int i = 0; i < 4; i++)
		matrix2[i] = 1;

	int** result1 = matr(2, 2, 2, matrix1, matrix2);
	int** product1;
	product1 = new int*[2];
	product1[0] = new int[2];
	product1[0][0] = 4;
	product1[0][1] = 4;
	product1[1] = new int[2];
	product1[1][0] = 4;
	product1[1][1] = 4;

	assert(result1, product1, 2, 2);

	//тест второй
	int matrix3[6];
	for (int i = 0; i < 6; i++)
		matrix3[i] = 2;

	int matrix4[6];
	for (int i = 0; i < 6; i++)
		matrix4[i] = 1;

	int** result2 = matr(3, 2, 2, matrix3, matrix4);
	int **product2;
	product2 = new int*[2];
	product2[0] = new int[2];
	product2[0][0] = 6;
	product2[0][1] = 6;
	product2[1] = new int[2];
	product2[1][0] = 6;
	product2[1][1] = 6;

	assert(result2, product2, 2, 2);




	//тест третий
	int matrix5[6];
	matrix5[0] = 3;
	matrix5[1] = 8;
	matrix5[2] = 5;
	matrix5[3] = 2;
	matrix5[4] = 2;
	matrix5[5] = 1;

	int matrix6[8];

	matrix6[0] = 1;
	matrix6[1] = 2;
	matrix6[2] = 3;
	matrix6[3] = 4;
	matrix6[4] = 4;
	matrix6[5] = 3;
	matrix6[6] = 2;
	matrix6[7] = 1;


	int** result3 = matr(2, 3, 4, matrix5, matrix6);
	int** product3;
	product3 = new int*[3];
	product3[0] = new int[4];
	product3[0][0] = 35;
	product3[0][1] = 30;
	product3[0][2] = 25;
	product3[0][3] = 20;
	product3[1] = new int[4];
	product3[1][0] = 13;
	product3[1][1] = 16;
	product3[1][2] = 19;
	product3[1][3] = 22;
	product3[2] = new int[4];
	product3[2][0] = 6;
	product3[2][1] = 7;
	product3[2][2] = 8;
	product3[2][3] = 9;


	assert(result3, product3, 3, 4);

}
